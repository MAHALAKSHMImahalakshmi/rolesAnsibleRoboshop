# -----------------------------------------------------------------------------
# Beginner-Friendly Explanation: Why Each Roboshop Component Connects as It Does
# -----------------------------------------------------------------------------
# 1. Frontend
#    - The frontend is the user interface (website) that customers use to shop.
#    - It does not store any business data itself. Instead, it sends API requests to backend services to get or update information.
#    - Example: When a user clicks "Add to Cart," the frontend calls the Cart Service API.
#    - Purpose: To provide a user-friendly interface and delegate all business logic to backend services.
#
# 2. Cart Service
#    - Manages the user's shopping cart (what items are added, removed, etc.).
#    - Connects to Redis:
#        * Purpose: To store cart data and user sessions quickly and temporarily. Redis is fast and ideal for this use-case.
#    - Connects to Catalogue Service:
#        * Purpose: To fetch product details (name, price, etc.) when a user adds an item to the cart. The cart service does not store product info itself.
#    - How: Uses the CATALOGUE_HOST and REDIS_HOST variables, set by Ansible, to know where to connect.
#
# 3. Catalogue Service
#    - Stores and manages all product information (name, price, description, etc.).
#    - Connects to MongoDB:
#        * Purpose: To store flexible, document-based product data. MongoDB is good for catalogs that may change structure over time.
#    - How: Uses the MONGODB_HOST variable set by Ansible.
#    - Other services (like Cart and Frontend) connect to the catalogue to get product details.
#
# 4. User Service
#    - Manages user accounts, logins, and registration.
#    - Connects to MongoDB:
#        * Purpose: To store user data flexibly and efficiently.
#    - How: Uses the MONGODB_HOST variable set by Ansible.
#    - The frontend and other services connect to the user service to authenticate users or get user info.
#
# 5. Shipping Service
#    - Handles shipping information and order delivery.
#    - Connects to MySQL:
#        * Purpose: To store structured, relational shipping and order data.
#    - How: Uses the MYSQL_HOST variable set by Ansible.
#    - Other services connect to shipping to get delivery status or update shipping info.
#
# 6. Payment Service
#    - Manages payment processing and order payments.
#    - Connects to MySQL:
#        * Purpose: To store payment transactions and order payment status in a reliable, transactional database.
#    - How: Uses the MYSQL_HOST variable set by Ansible.
#    - The frontend and other services connect to payment to process or check payments.
#
# 7. Redis
#    - An in-memory database used for fast, temporary storage (like shopping cart sessions).
#    - Only the Cart Service connects to Redis in this architecture.
#    - Purpose: To provide quick access to session and cart data, improving user experience.
#
# 8. MongoDB
#    - A NoSQL database used by Catalogue and User services for flexible, document-based storage.
#    - Only Catalogue and User services connect to MongoDB.
#    - Purpose: To store data that may change structure over time (products, users).
#
# 9. MySQL
#    - A relational database used by Shipping and Payment services for structured, transactional data.
#    - Only Shipping and Payment services connect to MySQL.
#    - Purpose: To ensure data integrity and support complex queries for orders and payments.
#
# 10. RabbitMQ (if used)
#     - A message broker for asynchronous communication between services (like order events, notifications).
#     - All services can connect to RabbitMQ to send or receive messages.
#     - Purpose: To decouple services and allow them to communicate reliably, even if one is temporarily down.
#
# -----------------------------------------------------------------------------
# Why this design?
# - Each microservice is responsible for a specific business function and uses the best database for its needs.
# - Services are independent: you can scale, update, or fix one without affecting others.
# - If any backend (like Redis, MongoDB, or MySQL) is down, the dependent service will not work correctly (e.g., Cart won’t work if Redis is down).
# - All hostnames (like catalogue.srivenkata.shop) are set in each service’s vars file and injected into systemd service files by Ansible for easy configuration.
# -----------------------------------------------------------------------------
# Example Flows: What Happens When You Click or Use Each Component
# -----------------------------------------------------------------------------
# 1. Add to Cart (from Frontend)
#    - User clicks "Add to Cart" on the website (Frontend)
#    - Frontend sends API request to Cart Service
#    - Cart Service:
#        a. Calls Catalogue Service to get product details (Catalogue fetches from MongoDB)
#        b. Stores cart/session data in Redis
#    - Cart Service responds to Frontend
#    - Frontend updates the UI
#
# 2. View Product Details
#    - User clicks a product on the website
#    - Frontend sends API request to Catalogue Service
#    - Catalogue Service fetches product info from MongoDB
#    - Catalogue Service responds to Frontend
#    - Frontend displays product details
#
# 3. User Login/Register
#    - User submits login/register form on Frontend
#    - Frontend sends API request to User Service
#    - User Service fetches/updates user info in MongoDB
#    - User Service responds to Frontend
#    - Frontend updates UI (shows user logged in)
#
# 4. Place Order (Checkout)
#    - User clicks "Checkout" on Frontend
#    - Frontend sends API request to Cart Service
#    - Cart Service fetches cart data from Redis
#    - Cart Service may call Catalogue Service for latest product info
#    - Cart Service sends order info to Shipping and Payment Services
#    - Shipping Service stores order/shipping info in MySQL
#    - Payment Service processes payment and stores transaction in MySQL
#    - All services may send/receive messages via RabbitMQ (if used)
#    - Frontend updates UI with order status
#
# 5. View Order Status
#    - User requests order status on Frontend
#    - Frontend sends API request to Shipping Service
#    - Shipping Service fetches order info from MySQL
#    - Shipping Service responds to Frontend
#    - Frontend displays order status
# -----------------------------------------------------------------------------
# This step-by-step flow shows how each component interacts for common user actions, making it easy for beginners to understand the full path of a request.
# -----------------------------------------------------------------------------

















