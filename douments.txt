# -----------------------------------------------------------------------------
# Ansible Roles: Beginner Guide and Implementation Steps
# -----------------------------------------------------------------------------
# What is an Ansible Role?
# - Ansible roles are a way to organize playbooks and reusable automation code.
# - Each role has a standard structure: tasks, files, templates, handlers, vars, etc.
# - Roles make your automation modular, reusable, and easier to maintain.
#
# -----------------------------------------------------------------------------
# Steps to Implement an Ansible Role (Example: MongoDB)
# -----------------------------------------------------------------------------
#
# 1. Create the Role Directory Structure
#    - Inside your project, create a 'roles' directory if it doesn't exist.
#    - Inside 'roles', create a directory for your role (e.g., 'mongodb').
#    - Inside the role directory, create subdirectories:
#        roles/
#          mongodb/
#            tasks/
#            files/
#
# 2. Add Task Definitions
#    - In 'roles/mongodb/tasks/', create a file named 'main.yaml'.
#    - This file should contain a list of tasks (YAML list), NOT a playbook.
#    - Example tasks: install packages, configure files, start services.
#
# 3. Add Supporting Files
#    - Place any files you want to copy to the target machine in 'roles/mongodb/files/'.
#    - Example: 'mongo.repo' for MongoDB repository configuration.
#
# 4. Reference the Role in a Playbook
#    - In your main playbook (e.g., 'mongodb.yaml'), use the 'roles:' keyword.
#    - Example:
#        - name: configure mongodb component
#          hosts: mongodb
#          become: yes
#          roles:
#            - mongodb
#
# 5. Define Inventory
#    - Create or update your 'inventory.ini' to define your hosts/groups.
#    - Example:
#        [mongodb]
#        mongodb.example.com
#
# 6. Run the Playbook
#    - Use the ansible-playbook command:
#        ansible-playbook -i inventory.ini mongodb.yaml
#
# -----------------------------------------------------------------------------
# Example Directory Structure:
# .
# ├── inventory.ini
# ├── mongodb.yaml
# └── roles
#     └── mongodb
#         ├── files
#         │   └── mongo.repo
#         └── tasks
#             └── main.yaml
#
# -----------------------------------------------------------------------------
# Key Points:
# - Do NOT use 'hosts:', 'become:', or 'tasks:' in 'roles/mongodb/tasks/main.yaml'.
# - Only use a list of tasks in 'main.yaml'.
# - Use 'roles:' in your playbook to call the role.
# - Place files to be copied in the 'files/' directory of the role.
# -----------------------------------------------------------------------------


Roles is a proper directory structure to write ansible playbooks, we can reuse roles. it will have tasks, vars, templates, files, handlers, etc.

{"changed": false, "msg": "Could not find or access 'mongo.repo'\nSearched in:\n\t/home/ec2-user/ansible-roboshop-roles/roles/mongodb/files/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/roles/mongodb/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/roles/mongodb/tasks/files/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/roles/mongodb/tasks/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/files/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/mongo.repo on the Ansible Controller.\nIf you are using a module and expect the file to exist on the remote, see the remote_src option"}

template --> we can keep some placeholders, you can put the values at run time

file --> content inside a specific file

# -----------------------------------------------------------------------------
# Step 7: Create a Generic main.yaml to Call Any Component Role
# -----------------------------------------------------------------------------
# Instead of creating a separate YAML playbook for each component (mongodb, catalogue, etc.),
# you can create a single 'main.yaml' playbook and use the 'component' variable to call any role.
#
# Example main.yaml:
# -----------------------------------------------------------------------------
# - name: configure "{{ component }}"
#   hosts: "{{ component }}"
#   become: yes
#   roles:
#     - "{{ component }}"
#note: mention quots else error
# -----------------------------------------------------------------------------
# How to Use:
# -----------------------------------------------------------------------------
# 1. Run the playbook with the desired component using the '-e' flag to set the variable:
#      ansible-playbook -i inventory.ini -e "component=mongodb" main.yaml
#    (Replace 'mongodb' with any other component name as needed.)
#
# 2. This will:
#    - Target the host group named after the component (from inventory.ini)
#    - Run the role with the same name as the component
#
# -----------------------------------------------------------------------------
# Why is this Useful?
# -----------------------------------------------------------------------------
# - Reduces duplication: Only one playbook file needed for all components.
# - Easy to maintain: Add new roles and inventory groups, and reuse the same playbook.
# - Flexible: Just change the 'component' variable to deploy/configure any service.
#
# -----------------------------------------------------------------------------
# Example Directory Structure:
# .
# ├── inventory.ini
# ├── main.yaml         # <--- This file
# └── roles
#     └── mongodb
#         ├── files
#         │   └── mongo.repo
#         └── tasks
#             └── main.yaml
#     └── catalogue
#         └── tasks
#             └── main.yaml
#     ... (other roles)
# -----------------------------------------------------------------------------
# Next Steps:
# - Add/modify roles for each component as needed.
# - Use the same main.yaml to deploy any component by changing the 'component' variable.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Step 8: Using Common Roles and Task Includes
# -----------------------------------------------------------------------------
# - Sometimes, multiple components need to perform the same setup steps (e.g., app setup, systemd setup).
# - To avoid repeating code, create a 'common' role inside the roles directory.
# - Place shared tasks in roles/common/tasks/ (e.g., appsetup.yaml,nodejs.yaml, systemd.yaml).
# - In your component's main.yaml (e.g., roles/catalogue/tasks/main.yaml), use 'include_role' to call these shared tasks:
#     - name: app setup
#       include_role:
#         name: common
#         tasks_from: appsetup
#     - name: set up systemd
#       include_role:
#         name: common
#         tasks_from: systemd
# - This keeps your code DRY (Don't Repeat Yourself) and easy to maintain.
# -----------------------------------------------------------------------------
# Step 9: How Variables Flow from vars → Templates → Tasks (Beginner Explanation)
# -----------------------------------------------------------------------------
# - Each role can have a 'vars' directory (roles/catalogue/vars/main.yaml) to define variables.
# - Example: roles/catalogue/vars/main.yaml
#     MONGODB_HOST: mongodb.srivenkata.shop
# - In your templates (e.g., roles/catalogue/templates/catalogue.service.j2), use variables with Jinja2 syntax:
#     [Service]
#     Environment=MONGODB_HOST={{ MONGODB_HOST }}
# - When a task uses the template module to deploy this file, Ansible automatically replaces {{ MONGODB_HOST }} with the value from vars/main.yaml.
# - Example task in roles/catalogue/tasks/main.yaml:
#     - name: Deploy catalogue systemd service
#       ansible.builtin.template:
#         src: catalogue.service.j2
#         dest: /etc/systemd/system/catalogue.service
# - Variable resolution order: vars/main.yaml → used in templates → referenced in tasks.
# - If you include another role (e.g., common), variables defined in the current role are available to the included tasks, unless overridden.
# -----------------------------------------------------------------------------
# How does Ansible know which variable to use?
# - Ansible automatically loads variables from the current role's vars/main.yaml.
# - When rendering a template or running a task, it looks for the variable in this order:
#   1. Extra vars (-e on the command line)
#   2. Task vars
#   3. Block vars
#   4. Role and include vars
#   5. Inventory vars
#   6. Play vars
#   7. Host facts
#   8. Registered vars
#   9. Set_facts
#   10. Default vars
# - So, if you define MONGODB_HOST in roles/catalogue/vars/main.yaml, it is available in all tasks and templates in that role.
# -----------------------------------------------------------------------------
# Example Flow:
# - roles/catalogue/vars/main.yaml: defines MONGODB_HOST
# - roles/catalogue/templates/catalogue.service.j2: uses {{ MONGODB_HOST }}
# - roles/catalogue/tasks/main.yaml: deploys the template
# - If a task includes another role (e.g., common), variables are inherited unless overridden.
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Variable and Task Flow: From main.yaml to Template Variable Rendering
# -----------------------------------------------------------------------------
# 1. main.yaml (Playbook)
#    - You run: ansible-playbook -i inventory.ini -e "component=catalogue" main.yaml
#    - This calls the 'catalogue' role for the 'catalogue' host group.
#
# 2. roles/catalogue/tasks/main.yaml
#    - Contains tasks for the catalogue component.
#    - Includes shared/common tasks using:
#        - name: set up systemd
#          include_role:
#            name: common
#            tasks_from: systemd
#
# 3. roles/common/tasks/systemd.yaml
#    - Contains tasks to set up systemd services, often using the template module.
#    - Example:
#        - name: Deploy catalogue systemd service
#          ansible.builtin.template:
#            src: catalogue.service.j2
#            dest: /etc/systemd/system/catalogue.service
#
# 4. roles/catalogue/templates/catalogue.service.j2
#    - Jinja2 template file for the systemd service.
#    - Uses variables like {{ MONGODB_HOST }}.
#
# 5. roles/catalogue/vars/main.yaml
#    - Defines variables for the catalogue role, e.g.:
#        MONGODB_HOST: mongodb.srivenkata.shop
#
# 6. Variable Resolution
#    - When the template is rendered, Ansible looks for {{ MONGODB_HOST }} in the current role's vars/main.yaml.
#    - The value is substituted into the template and deployed to the target host.
#
# -----------------------------------------------------------------------------
# Visual Flow:

#
# main.yaml (playbook)
#   ↓
# roles/catalogue/tasks/main.yaml
#   ↓ (include_role)
# roles/common/tasks/systemd.yaml
#   ↓ (template module)
# roles/catalogue/templates/catalogue.service.j2
#   ↑ (uses variable)
# roles/catalogue/vars/main.yaml
# -----------------------------------------------------------------------------
# This flow ensures variables are available to templates and tasks, even when including roles.
# -----------------------------------------------------------------------------


# -----------------------------------------------------------------------------
# Step 10: Using Handlers for Safe Service Restarts (Beginner Guide)
# -----------------------------------------------------------------------------
# Why use handlers?
# - Handlers in Ansible are special tasks that run only when notified by another task.
# - This is useful for restarting services (like nginx) only when a configuration file changes, avoiding unnecessary downtime.
#
# Example Flow for Frontend Component:
#
# 1. Playbook/main.yaml
#    ↓
# 2. roles/frontend/tasks/main.yaml
#    - Copies nginx.conf using the template module
#    - Uses 'notify' to trigger a handler if the file changes
#    ↓
# 3. roles/frontend/handlers/main.yaml
#    - Defines the handler to restart nginx
#
# 4. roles/frontend/templates/nginx.conf.j2
#    - Jinja2 template for nginx config, uses variables from roles/frontend/vars/main.yaml
#
# 5. roles/frontend/vars/main.yaml
#    - Defines variables like CATALOUGE_HOST, USER_HOST, etc.
#
# -----------------------------------------------------------------------------
# Visual Chart:
#
# [main.yaml]
#    ↓
# [roles/frontend/tasks/main.yaml]
#    ↓ (template module + notify)
# [roles/frontend/templates/nginx.conf.j2]
#    ↑ (uses variables from)
# [roles/frontend/vars/main.yaml]
#    ↓ (if changed)
# [roles/frontend/handlers/main.yaml]
#    → restart nginx
# -----------------------------------------------------------------------------
# Example Code:
#
# tasks/main.yaml:
# - name: copy roboshop nginx conf
#   ansible.builtin.template:
#     src: nginx.conf.j2
#     dest: /etc/nginx/nginx.conf
#   notify:
#     - restart nginx
#
# handlers/main.yaml:
# - name: restart nginx
#   ansible.builtin.service:
#     name: nginx
#     state: restarted
#
# -----------------------------------------------------------------------------
# Key Points for Beginners:
# - Handlers only run if notified (when a file actually changes).
# - The 'notify' name must match the handler's 'name'.
# - This prevents unnecessary restarts and downtime.
# - Place handlers in roles/<role>/handlers/main.yaml.
# -----------------------------------------------------------------------------
# Visual Steps: How Ansible Connects Everything for Frontend Deployment
# -----------------------------------------------------------------------------
# 1. You run:
#      ansible-playbook -i inventory.ini -e "component=frontend" main.yaml
#
# 2. [main.yaml]
#    - Targets the 'frontend' group from inventory.ini
#    - Calls the 'frontend' role
#    ↓
# 3. [roles/frontend/tasks/main.yaml]
#    - Executes tasks for frontend
#    - Copies nginx.conf using the template module
#    - Uses 'notify' to trigger handler if config changes
#    ↓
# 4. [roles/frontend/templates/nginx.conf.j2]
#    - Jinja2 template for nginx config
#    - Uses variables like {{ CATALOUGE_HOST }} from vars
#    ↑
# 5. [roles/frontend/vars/main.yaml]
#    - Defines all variables used in the template (e.g., CATALOUGE_HOST, USER_HOST, etc.)
#    ↓ (if config file changed)
# 6. [roles/frontend/handlers/main.yaml]
#    - Handler runs to restart nginx service
# -----------------------------------------------------------------------------
# Visual Chart:
#
# [inventory.ini] (defines frontend hosts)
#      ↓
# [main.yaml] (calls frontend role)
#      ↓
# [roles/frontend/tasks/main.yaml] (template + notify)
#      ↓
# [roles/frontend/templates/nginx.conf.j2] (uses variables)
#      ↑
# [roles/frontend/vars/main.yaml] (defines variables)
#      ↓ (if changed)
# [roles/frontend/handlers/main.yaml] (restarts nginx)
# -----------------------------------------------------------------------------
# This flow ensures that when you run the playbook, all variables, templates, and handlers are connected and executed in the right order for a safe and automated deployment.
# -----------------------------------------------------------------------------
