# -----------------------------------------------------------------------------
# üìù Ansible Roles: Beginner Guide and Implementation Steps üöÄ
# -----------------------------------------------------------------------------
# ‚ùì What is an Ansible Role?
# - Ansible roles are a way to organize playbooks and reusable automation code. üì¶
# - Each role has a standard structure: tasks, files, templates, handlers, vars, etc. üóÇÔ∏è
# - Roles make your automation modular, reusable, and easier to maintain. üîÑ
#
# -----------------------------------------------------------------------------
# üõ†Ô∏è Steps to Implement an Ansible Role (Example: MongoDB) üçÉ
# -----------------------------------------------------------------------------
#
# 1Ô∏è‚É£ Create the Role Directory Structure
#    - Inside your project, create a 'roles' directory if it doesn't exist. üìÅ
#    - Inside 'roles', create a directory for your role (e.g., 'mongodb'). üìÇ
#    - Inside the role directory, create subdirectories:
#        roles/
#          mongodb/
#            tasks/
#            files/
#
# 2Ô∏è‚É£ Add Task Definitions
#    - In 'roles/mongodb/tasks/', create a file named 'main.yaml'. üìÑ
#    - This file should contain a list of tasks (YAML list), NOT a playbook. üìù
#    - Example tasks: install packages, configure files, start services. ‚öôÔ∏è
#
# 3Ô∏è‚É£ Add Supporting Files
#    - Place any files you want to copy to the target machine in 'roles/mongodb/files/'. üì¶
#    - Example: 'mongo.repo' for MongoDB repository configuration. üóÉÔ∏è
#
# 4Ô∏è‚É£ Reference the Role in a Playbook
#    - In your main playbook (e.g., 'mongodb.yaml'), use the 'roles:' keyword. üè∑Ô∏è
#    - Example:
#        - name: configure mongodb component
#          hosts: mongodb
#          become: yes
#          roles:
#            - mongodb
#
# 5Ô∏è‚É£ Define Inventory
#    - Create or update your 'inventory.ini' to define your hosts/groups. üñ•Ô∏è
#    - Example:
#        [mongodb]
#        mongodb.example.com
#
# 6Ô∏è‚É£ Run the Playbook
#    - Use the ansible-playbook command: ‚ñ∂Ô∏è
#        ansible-playbook -i inventory.ini mongodb.yaml
#
# -----------------------------------------------------------------------------
# üóÇÔ∏è Example Directory Structure:
# .
# ‚îú‚îÄ‚îÄ inventory.ini
# ‚îú‚îÄ‚îÄ mongodb.yaml
# ‚îî‚îÄ‚îÄ roles
#     ‚îî‚îÄ‚îÄ mongodb
#         ‚îú‚îÄ‚îÄ files
#         ‚îÇ   ‚îî‚îÄ‚îÄ mongo.repo
#         ‚îî‚îÄ‚îÄ tasks
#             ‚îî‚îÄ‚îÄ main.yaml
#
# -----------------------------------------------------------------------------
# ‚≠ê Key Points:
# - Do NOT use 'hosts:', 'become:', or 'tasks:' in 'roles/mongodb/tasks/main.yaml'. üö´
# - Only use a list of tasks in 'main.yaml'. üìã
# - Use 'roles:' in your playbook to call the role. üè∑Ô∏è
# - Place files to be copied in the 'files/' directory of the role. üì¶
# -----------------------------------------------------------------------------

Roles is a proper directory structure to write ansible playbooks, we can reuse roles. it will have tasks, vars, templates, files, handlers, etc.

{"changed": false, "msg": "Could not find or access 'mongo.repo'\nSearched in:\n\t/home/ec2-user/ansible-roboshop-roles/roles/mongodb/files/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/roles/mongodb/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/roles/mongodb/tasks/files/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/roles/mongodb/tasks/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/files/mongo.repo\n\t/home/ec2-user/ansible-roboshop-roles/mongo.repo on the Ansible Controller.\nIf you are using a module and expect the file to exist on the remote, see the remote_src option"}

template --> we can keep some placeholders, you can put the values at run time

file --> content inside a specific file

# -----------------------------------------------------------------------------
# Step 7: Create a Generic main.yaml to Call Any Component Role
# -----------------------------------------------------------------------------
# Instead of creating a separate YAML playbook for each component (mongodb, catalogue, etc.),
# you can create a single 'main.yaml' playbook and use the 'component' variable to call any role.
#
# Example main.yaml:
# -----------------------------------------------------------------------------
# - name: configure "{{ component }}"`
#   hosts: "{{ component }}"`
#   become: yes
#   roles:
#     - "{{ component }}"
#note: mention quots else error
# -----------------------------------------------------------------------------
# How to Use:
# -----------------------------------------------------------------------------
# 1. Run the playbook with the desired component using the '-e' flag to set the variable:
#      ansible-playbook -i inventory.ini -e "component=mongodb" main.yaml
#    (Replace 'mongodb' with any other component name as needed.)
#
# 2. This will:
#    - Target the host group named after the component (from inventory.ini)
#    - Run the role with the same name as the component
#
# -----------------------------------------------------------------------------
# Why is this Useful?
# -----------------------------------------------------------------------------
# - Reduces duplication: Only one playbook file needed for all components.
# - Easy to maintain: Add new roles and inventory groups, and reuse the same playbook.
# - Flexible: Just change the 'component' variable to deploy/configure any service.
#
# -----------------------------------------------------------------------------
# üóÇÔ∏è Example Directory Structure:
# .
# ‚îú‚îÄ‚îÄ inventory.ini
# ‚îú‚îÄ‚îÄ main.yaml         # <--- This file
# ‚îî‚îÄ‚îÄ roles
#     ‚îî‚îÄ‚îÄ mongodb
#         ‚îú‚îÄ‚îÄ files
#         ‚îÇ   ‚îî‚îÄ‚îÄ mongo.repo
#         ‚îî‚îÄ‚îÄ tasks
#             ‚îî‚îÄ‚îÄ main.yaml
#     ‚îî‚îÄ‚îÄ catalogue
#         ‚îî‚îÄ‚îÄ tasks
#             ‚îî‚îÄ‚îÄ main.yaml
#     ... (other roles)
# -----------------------------------------------------------------------------
# Next Steps:
# - Add/modify roles for each component as needed.
# - Use the same main.yaml to deploy any component by changing the 'component' variable.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Step 8: Using Common Roles and Task Includes
# -----------------------------------------------------------------------------
# - Sometimes, multiple components need to perform the same setup steps (e.g., app setup, systemd setup).
# - To avoid repeating code, create a 'common' role inside the roles directory.
# - Place shared tasks in roles/common/tasks/ (e.g., appsetup.yaml,nodejs.yaml, systemd.yaml).
# - In your component's main.yaml (e.g., roles/catalogue/tasks/main.yaml), use 'include_role' to call these shared tasks:
#     - name: app setup
#       include_role:
#         name: common
#         tasks_from: appsetup
#     - name: set up systemd
#       include_role:
#         name: common
#         tasks_from: systemd
# - This keeps your code DRY (Don't Repeat Yourself) and easy to maintain.
# -----------------------------------------------------------------------------
# Step 9: How Variables Flow from vars ‚Üí Templates ‚Üí Tasks (Beginner Explanation)
# -----------------------------------------------------------------------------
# - Each role can have a 'vars' directory (roles/catalogue/vars/main.yaml) to define variables.
# - Example: roles/catalogue/vars/main.yaml
#     MONGODB_HOST: mongodb.srivenkata.shop
# - In your templates (e.g., roles/catalogue/templates/catalogue.service.j2), use variables with Jinja2 syntax:
#     [Service]
#     Environment=MONGODB_HOST={{ MONGODB_HOST }}
# - When a task uses the template module to deploy this file, Ansible automatically replaces {{ MONGODB_HOST }} with the value from vars/main.yaml.
# - Example task in roles/catalogue/tasks/main.yaml:
#     - name: Deploy catalogue systemd service
#       ansible.builtin.template:
#         src: catalogue.service.j2
#         dest: /etc/systemd/system/catalogue.service
# - Variable resolution order: vars/main.yaml ‚Üí used in templates ‚Üí referenced in tasks.
# - If you include another role (e.g., common), variables defined in the current role are available to the included tasks, unless overridden.
# -----------------------------------------------------------------------------
# How does Ansible know which variable to use?
# - Ansible automatically loads variables from the current role's vars/main.yaml.
# - When rendering a template or running a task, it looks for the variable in this order:
#   1. Extra vars (-e on the command line)
#   2. Task vars
#   3. Block vars
#   4. Role and include vars
#   5. Inventory vars
#   6. Play vars
#   7. Host facts
#   8. Registered vars
#   9. Set_facts
#   10. Default vars
# - So, if you define MONGODB_HOST in roles/catalogue/vars/main.yaml, it is available in all tasks and templates in that role.
# -----------------------------------------------------------------------------
# Example Flow:
# - roles/catalogue/vars/main.yaml: defines MONGODB_HOST
# - roles/catalogue/templates/catalogue.service.j2: uses {{ MONGODB_HOST }}
# - roles/catalogue/tasks/main.yaml: deploys the template
# - If a task includes another role (e.g., common), variables are inherited unless overridden.
# -----------------------------------------------------------------------------
# -----------------------------------------------------------------------------
# Variable and Task Flow: From main.yaml to Template Variable Rendering
# -----------------------------------------------------------------------------
# 1. main.yaml (Playbook)
#    - You run: ansible-playbook -i inventory.ini -e "component=catalogue" main.yaml
#    - This calls the 'catalogue' role for the 'catalogue' host group.
#
# 2. roles/catalogue/tasks/main.yaml
#    - Contains tasks for the catalogue component.
#    - Includes shared/common tasks using:
#        - name: set up systemd
#          include_role:
#            name: common
#            tasks_from: systemd
#
# 3. roles/common/tasks/systemd.yaml
#    - Contains tasks to set up systemd services, often using the template module.
#    - Example:
#        - name: Deploy catalogue systemd service
#          ansible.builtin.template:
#            src: catalogue.service.j2
#            dest: /etc/systemd/system/catalogue.service
#
# 4. roles/catalogue/templates/catalogue.service.j2
#    - Jinja2 template file for the systemd service.
#    - Uses variables like {{ MONGODB_HOST }}.
#
# 5. roles/catalogue/vars/main.yaml
#    - Defines variables for the catalogue role, e.g.:
#        MONGODB_HOST: mongodb.srivenkata.shop
#
# 6. Variable Resolution
#    - When the template is rendered, Ansible looks for {{ MONGODB_HOST }} in the current role's vars/main.yaml.
#    - The value is substituted into the template and deployed to the target host.
#
# -----------------------------------------------------------------------------
# Visual Flow:

#
# main.yaml (playbook)
#   ‚Üì
# roles/catalogue/tasks/main.yaml
#   ‚Üì (include_role)
# roles/common/tasks/systemd.yaml
#   ‚Üì (template module)
# roles/catalogue/templates/catalogue.service.j2
#   ‚Üë (uses variable)
# roles/catalogue/vars/main.yaml
# -----------------------------------------------------------------------------
# This flow ensures variables are available to templates and tasks, even when including roles.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Step 10: Using Handlers for Safe Service Restarts (Beginner Guide)
# -----------------------------------------------------------------------------
# Why use handlers?
# - Handlers in Ansible are special tasks that run only when notified by another task.
# - This is useful for restarting services (like nginx) only when a configuration file changes, avoiding unnecessary downtime.
#
# Example Flow for Frontend Component:
#
# 1. Playbook/main.yaml
#    ‚Üì
# 2. roles/frontend/tasks/main.yaml
#    - Copies nginx.conf using the template module
#    - Uses 'notify' to trigger a handler if the file changes
#    ‚Üì
# 3. roles/frontend/handlers/main.yaml
#    - Defines the handler to restart nginx
#
# 4. roles/frontend/templates/nginx.conf.j2
#    - Jinja2 template for nginx config, uses variables from roles/frontend/vars/main.yaml
#
# 5. roles/frontend/vars/main.yaml
#    - Defines variables like CATALOUGE_HOST, USER_HOST, etc.
#
# -----------------------------------------------------------------------------
# Visual Chart:
#
# [main.yaml]
#    ‚Üì
# [roles/frontend/tasks/main.yaml]
#    ‚Üì (template module + notify)
# [roles/frontend/templates/nginx.conf.j2]
#    ‚Üë (uses variables from)
# [roles/frontend/vars/main.yaml]
#    ‚Üì (if changed)
# [roles/frontend/handlers/main.yaml]
#    ‚Üí restart nginx
# -----------------------------------------------------------------------------
# Example Code:
#
# tasks/main.yaml:
# - name: copy roboshop nginx conf
#   ansible.builtin.template:
#     src: nginx.conf.j2
#     dest: /etc/nginx/nginx.conf
#   notify:
#     - restart nginx
#
# handlers/main.yaml:
# - name: restart nginx
#   ansible.builtin.service:
#     name: nginx
#     state: restarted
#
# -----------------------------------------------------------------------------
# Key Points for Beginners:
# - Handlers only run if notified (when a file actually changes).
# - The 'notify' name must match the handler's 'name'.
# - This prevents unnecessary restarts and downtime.
# - Place handlers in roles/<role>/handlers/main.yaml.
# -----------------------------------------------------------------------------
# Visual Steps: How Ansible Connects Everything for Frontend Deployment
# -----------------------------------------------------------------------------
# 1. You run:
#      ansible-playbook -i inventory.ini -e "component=frontend" main.yaml
#
# 2. [main.yaml]
#    - Targets the 'frontend' group from inventory.ini
#    - Calls the 'frontend' role
#    ‚Üì
# 3. [roles/frontend/tasks/main.yaml]
#    - Executes tasks for frontend
#    - Copies nginx.conf using the template module
#    - Uses 'notify' to trigger handler if config changes
#    ‚Üì
# 4. [roles/frontend/templates/nginx.conf.j2]
#    - Jinja2 template for nginx config
#    - Uses variables like {{ CATALOUGE_HOST }} from vars
#    ‚Üë
# 5. [roles/frontend/vars/main.yaml]
#    - Defines all variables used in the template (e.g., CATALOUGE_HOST, USER_HOST, etc.)
#    ‚Üì (if config file changed)
# 6. [roles/frontend/handlers/main.yaml]
#    - Handler runs to restart nginx service
# -----------------------------------------------------------------------------
# Visual Chart:
#
# [inventory.ini] (defines frontend hosts)
#      ‚Üì
# [main.yaml] (calls frontend role)
#      ‚Üì
# [roles/frontend/tasks/main.yaml] (template + notify)
#      ‚Üì
# [roles/frontend/templates/nginx.conf.j2] (uses variables)
#      ‚Üë
# [roles/frontend/vars/main.yaml] (defines variables)
#      ‚Üì (if changed)
# [roles/frontend/handlers/main.yaml] (restarts nginx)
# -----------------------------------------------------------------------------
# This flow ensures that when you run the playbook, all variables, templates, and handlers are connected and executed in the right order for a safe and automated deployment.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Step 11: Visual Steps and Notes - How Ansible Connects Everything for Redis Deployment
# -----------------------------------------------------------------------------
# Notes for Beginners:
# - The process for deploying Redis with Ansible roles can be simpler than frontend if you do not use templates, vars, or handlers.
# - You organize your code into roles/redis/ with at least a tasks/main.yaml file.
# - All logic (install, configure, start service) can be written directly in tasks/main.yaml.
# - If you do not use templates or handlers, there is no need for templates/, vars/, or handlers/ directories in the redis role.
# - This is common for simple components where configuration is static or handled directly in tasks.
#
# Visual Steps:
#
# 1. You run:
#      ansible-playbook -i inventory.ini -e "component=redis" main.yaml
#
# 2. [main.yaml]
#    - Targets the 'redis' group from inventory.ini
#    - Calls the 'redis' role
#    ‚Üì
# 3. [roles/redis/tasks/main.yaml]
#    - Executes all tasks for redis (install, configure, start service, etc.)
# -----------------------------------------------------------------------------
# Visual Chart:
#
# [inventory.ini] (defines redis hosts)
#      ‚Üì
# [main.yaml] (calls redis role)
#      ‚Üì
# [roles/redis/tasks/main.yaml] (all logic for redis)
# -----------------------------------------------------------------------------
# This flow ensures that when you run the playbook for redis, all tasks are executed in the right order for a safe and automated deployment, even if you do not use templates, vars, or handlers for this component.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Step 12: Visual Steps and Notes - How Ansible Connects Everything for User Deployment
# -----------------------------------------------------------------------------
# Notes for Beginners:
# - The user component uses common roles for app setup, nodejs, and systemd.
# - You organize your code into roles/user/ with subfolders for tasks, templates, and vars.
# - Variables for user (like REDIS_HOST, MONGODB_HOST) are defined in vars/main.yaml and used in templates.
# - The template module copies user.service.j2 to the server, and if it changes, a handler can restart the user service.
# - This ensures configuration changes are applied safely and only when needed.
#
# Visual Steps:
#
# 1. You run:
#      ansible-playbook -i inventory.ini -e "component=user" main.yaml
#
# 2. [main.yaml]
#    - Targets the 'user' group from inventory.ini
#    - Calls the 'user' role
#    ‚Üì
# 3. [roles/user/tasks/main.yaml]
#    - Includes common roles for appsetup, nodejs, and systemd
#    - Uses the template module to copy user.service.j2 if needed
#    - Uses 'notify' to trigger handler if config changes
#    ‚Üì
# 4. [roles/user/templates/user.service.j2]
#    - Jinja2 template for user systemd service
#    - Uses variables like {{ REDIS_HOST }}, {{ MONGODB_HOST }} from vars
#    ‚Üë
# 5. [roles/user/vars/main.yaml]
#    - Defines all variables used in the template (e.g., REDIS_HOST, MONGODB_HOST)
#    ‚Üì (if config file changed)
# 6. [roles/user/handlers/main.yaml] (optional)
#    - Handler runs to restart user service if needed
# -----------------------------------------------------------------------------
# Visual Chart:
#
# [inventory.ini] (defines user hosts)
#      ‚Üì
# [main.yaml] (calls user role)
#      ‚Üì
# [roles/user/tasks/main.yaml] (includes common roles, template + notify)
#      ‚Üì
# [roles/user/templates/user.service.j2] (uses variables)
#      ‚Üë
# [roles/user/vars/main.yaml] (defines variables)
#      ‚Üì (if changed)
# [roles/user/handlers/main.yaml] (restarts user service)
# -----------------------------------------------------------------------------
# This flow ensures that when you run the playbook for user, all variables, templates, and handlers are connected and executed in the right order for a safe and automated deployment.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Step 13: Visual Steps and Notes - How Ansible Connects Everything for Cart Deployment
# -----------------------------------------------------------------------------
# Notes for Beginners:
# - The cart component follows the same structure and steps as the user component.
# - You organize your code into roles/cart/ with subfolders for tasks, templates, and vars.
# - Variables for cart (like REDIS_HOST, CATALOGUE_HOST) are defined in vars/main.yaml and used in templates.
# - The template module copies cart.service.j2 to the server, and if it changes, a handler can restart the cart service.
#
# Visual Steps:
#
# 1. You run:
#      ansible-playbook -i inventory.ini -e "component=cart" main.yaml
#
# 2. [main.yaml]
#    - Targets the 'cart' group from inventory.ini
#    - Calls the 'cart' role
#    ‚Üì
# 3. [roles/cart/tasks/main.yaml]
#    - Includes common roles for appsetup, nodejs, and systemd
#    - Uses the template module to copy cart.service.j2 if needed
#    - Uses 'notify' to trigger handler if config changes
#    ‚Üì
# 4. [roles/cart/templates/cart.service.j2]
#    - Jinja2 template for cart systemd service
#    - Uses variables like {{ REDIS_HOST }}, {{ CATALOGUE_HOST }} from vars
#    ‚Üë
# 5. [roles/cart/vars/main.yaml]
#    - Defines all variables used in the template (e.g., REDIS_HOST, CATALOGUE_HOST)
#    ‚Üì (if config file changed)
# 6. [roles/cart/handlers/main.yaml] (optional)
#    - Handler runs to restart cart service if needed
# -----------------------------------------------------------------------------
# Visual Chart:
#
# [inventory.ini] (defines cart hosts)
#      ‚Üì
# [main.yaml] (calls cart role)
#      ‚Üì
# [roles/cart/tasks/main.yaml] (includes common roles, template + notify)
#      ‚Üì
# [roles/cart/templates/cart.service.j2] (uses variables)
#      ‚Üë
# [roles/cart/vars/main.yaml] (defines variables)
#      ‚Üì (if changed)
# [roles/cart/handlers/main.yaml] (restarts cart service)
# -----------------------------------------------------------------------------
# This flow ensures that when you run the playbook for cart, all variables, templates, and handlers are connected and executed in the right order for a safe and automated deployment.
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Step 14: Setting Up MySQL Component (Beginner Guide) üê¨
# -----------------------------------------------------------------------------
# 1. Create a new role for MySQL:
#    - In the roles directory, create a folder named 'mysql' üìÅ
#    - Inside 'mysql', create a 'tasks' directory and add a 'main.yaml' file üìÑ
#    - Copy the required Ansible tasks for installing and configuring MySQL into 'main.yaml' üìù
#    - Example tasks: install MySQL, set root password, configure users/databases üîë
# 2. Run the playbook:
#    - Use: ansible-playbook -i inventory.ini -e "component=mysql" main.yaml ‚ñ∂Ô∏è
#    - This will set up MySQL on the target host defined in your inventory üñ•Ô∏è
# 3. Why this step?
#    - MySQL is needed for services like Shipping and Payment to store and retrieve structured data (orders, payments, etc.) üí≥üöö
#    - Setting up MySQL as a separate role keeps your project modular and reusable üß©
# -----------------------------------------------------------------------------
# Notes:
# - Always secure your MySQL installation (set strong root password, limit remote access, etc.) üîí
# - Use Ansible variables for credentials and hostnames for easy configuration ‚öôÔ∏è
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Step 15: Setting Up Shipping Component with Maven and MySQL (Beginner Guide) üööüê¨
# -----------------------------------------------------------------------------
# 1. Create a new role for Shipping:
#    - In the roles directory, create a folder named 'shipping' üìÅ
#    - Inside 'shipping', create a 'tasks' directory and add a 'main.yaml' file üìÑ
#    - Add the required Ansible tasks for app setup, maven build, systemd setup, and database import üõ†Ô∏è
# 2. Common Maven Setup:
#    - In the 'common' role, create a 'maven.yaml' in the tasks directory üìù
#    - This should include tasks to install Maven, MySQL client, Python modules (PyMySQL, cryptography), build the Java app, and rename the jar file ‚òï
#    - Use 'include_role' in shipping/tasks/main.yaml to call the common maven setup üîÅ
# 3. Database Import:
#    - Use the 'community.mysql.mysql_db' module to import schema and data into MySQL üê¨
#    - Use a loop to import multiple SQL files as needed üîÑ
# 4. Restart Shipping Service:
#    - After importing data, restart the shipping service to apply changes üîÑ
# 5. Why this step?
#    - Shipping is a Java (Maven) application that needs to be built and deployed ‚òï
#    - It depends on MySQL for storing shipping/order data üê¨
#    - Using common roles for repeated steps (like Maven setup) keeps your code DRY and maintainable üßº
# -----------------------------------------------------------------------------
# Notes:
# - Always check that MySQL is running and accessible before importing data ‚úÖ
# - Use Ansible variables for database credentials and hostnames ‚öôÔ∏è
# - Restarting the service ensures the app uses the latest configuration and data üîÑ
# -----------------------------------------------------------------------------

# -----------------------------------------------------------------------------
# Step 16: Setting Up Payment Component with Python and MySQL (Beginner Guide)
# -----------------------------------------------------------------------------
# 1. Create a new role for Payment:
#    - In the roles directory, create a folder named 'payment'.
#    - Inside 'payment', create a 'tasks' directory and add a 'main.yaml' file.
#    - Add the required Ansible tasks for app setup, Python environment, systemd setup, and service configuration.
# 2. Common Python Setup:
#    - In the 'common' role, create a 'python.yaml' in the tasks directory.
#    - This should include tasks to install Python3, GCC, python3-devel, and pip dependencies from requirements.txt.
#    - Use 'include_role' in payment/tasks/main.yaml to call the common python setup.
# 3. Systemd and Template:
#    - Use the template module to deploy the payment service systemd file (e.g., payment.service.j2), with variables from the vars directory.
#    - Variables like USER_HOST, CART_HOST, RABBITMQ_HOST, etc., are defined in payment/vars/main.yaml and injected into the template.
# 4. Why this step?
#    - Payment is a Python application that needs a proper Python environment and dependencies.
#    - It connects to MySQL for payment/order data and RabbitMQ for messaging.
#    - Using common roles for repeated steps (like Python setup) keeps your code DRY and maintainable.
# -----------------------------------------------------------------------------
# Notes:
# - Always check that MySQL and RabbitMQ are running and accessible before starting the payment service.
# - Use Ansible variables for all hostnames and credentials.
# - Templates allow you to inject environment variables into the systemd service file for easy configuration.


# -----------------------------------------------------------------------------
# Project Flow Summary (Beginner Notes)
# -----------------------------------------------------------------------------
# - Each microservice (cart, user, catalogue, shipping, payment, etc.) is set up as a separate role in Ansible.
# - Common tasks (like app setup, maven build, systemd setup) are placed in a 'common' role and included where needed.
# - Variables (like hostnames, credentials) are defined in each role's vars directory for easy configuration.
# - Templates (like systemd service files) use these variables to generate correct configs for each service.
# - Handlers are used to restart services only when configuration changes.
# - The playbook (main.yaml) is generic and can deploy any component by passing the 'component' variable.
# - The flow for each component: inventory ‚Üí playbook ‚Üí role tasks ‚Üí common tasks ‚Üí templates/vars ‚Üí handlers.
# - This modular approach makes the project easy to maintain, scale, and troubleshoot.
# -----------------------------------------------------------------------------



[Frontend]
   |
   |---> [Cart Service] -----------+
   |                               |
   |---> [User Service]            |
   |                               |
   |---> [Catalogue Service]       |
   |                               |
   |---> [Shipping Service]        |
   |                               |
   |---> [Payment Service]         |
   |                               |
   |---> [Other APIs...]           |
                                   |
[Cart Service] --------------------+
   |                               |
   |---> [Redis]                   |
   |---> [Catalogue Service] ------+
                                   |
[Catalogue Service] --------------> [MongoDB]
[User Service] -------------------> [MongoDB]
[Shipping Service] ---------------> [MySQL]
[Payment Service] ----------------> [MySQL]
[Cart Service] -------------------> [Redis]
[All Services] -------------------> [RabbitMQ] (if used for messaging)

Explanation
Frontend talks to all backend services via API endpoints.
Cart Service needs:
REDIS_HOST (for session storage)
CATALOGUE_HOST (to fetch product details)
Catalogue Service and User Service use MONGODB_HOST.
Shipping and Payment use MYSQL_HOST.
RabbitMQ is used for messaging between services (if implemented).
All hostnames (like catalogue.srivenkata.shop) are set in each service‚Äôs vars file and injected into systemd service files by Ansible.



# -----------------------------------------------------------------------------
# Common Mistake: Redis Not Connected Causes Cart Errors
# -----------------------------------------------------------------------------
# Mistake:
# If the Redis microservice is not running or not connected, and you try to add an item to the cart (from the catalogue or frontend), you will get errors like "no object found" or the cart will not work. This is because the Cart service depends on Redis for session storage and cart data. If Redis is down, unreachable, or the REDIS_HOST variable is not set correctly, the Cart service cannot store or retrieve cart information, causing add-to-cart operations to fail.
# -----------------------------------------------------------------------------
# Clean Connection Diagram and Explanation
# -----------------------------------------------------------------------------
# How Roboshop Components Connect (Beginner Friendly)
#
# [Frontend]
#    |
#    |---> [Cart Service] -----------+
#    |                               |
#    |---> [User Service]            |
#    |                               |
#    |---> [Catalogue Service]       |
#    |                               |
#    |---> [Shipping Service]        |
#    |                               |
#    |---> [Payment Service]         |
#    |                               |
#    |---> [Other APIs...]           |
#                                    |
# [Cart Service] --------------------+
#    |                               |
#    |---> [Redis]                   |
#    |---> [Catalogue Service] ------+
#                                    |
# [Catalogue Service] --------------> [MongoDB]
# [User Service] -------------------> [MongoDB]
# [Shipping Service] ---------------> [MySQL]
# [Payment Service] ----------------> [MySQL]
# [All Services] -------------------> [RabbitMQ] (if used for messaging)
# -----------------------------------------------------------------------------
# Why These Connections?
# - Frontend: Sends API requests to all backend services (cart, user, catalogue, shipping, payment, etc.).
# - Cart Service: Needs Redis for session/cart data and Catalogue for product details.
# - Catalogue/User: Use MongoDB for storing product/user data.
# - Shipping/Payment: Use MySQL for their data.
# - RabbitMQ: Used for messaging between services (if implemented).
# - All hostnames (like catalogue.srivenkata.shop) are set in each service‚Äôs vars file and injected into systemd service files by Ansible.
#
# This architecture allows each microservice to scale independently and makes troubleshooting easier, but it also means every dependency (like Redis) must be running and correctly configured for the system to work.
# -----------------------------------------------------------------------------
# üêû My Roboshop Ansible Journey: Mistakes & How I Tackled Them üöÄ
# -----------------------------------------------------------------------------
# üë∂ When I started, I made a lot of classic beginner mistakes! Here‚Äôs my story:
#
# 1Ô∏è‚É£  **Wrong File/Directory Names**
#     - ‚ùå I named files like `paymnt.service.j2` instead of `payment.service.j2`.
#     - üõ†Ô∏è Solution: Double-checked spelling and matched names exactly as referenced in tasks.
#
# 2Ô∏è‚É£  **Playbook Keys in Role Tasks**
#     - ‚ùå I put `hosts:`, `become:`, or `tasks:` in `roles/<role>/tasks/main.yaml`.
#     - üõ†Ô∏è Solution: Learned that only a list of tasks should be in role task files‚Äîno playbook-level keys!
#
# 3Ô∏è‚É£  **Variable Not Found/Undefined**
#     - ‚ùå Got errors like `undefined variable` or `no object found`.
#     - üõ†Ô∏è Solution: Made sure all variables (like `CATALOGUE_HOST`, `REDIS_HOST`) were defined in the correct `vars/main.yaml` and used proper Jinja2 syntax (`{{ VAR_NAME }}`) in templates.
#
# 4Ô∏è‚É£  **File Not Found on Controller**
#     - ‚ùå Ansible couldn‚Äôt find files like `mongo.repo` or templates.
#     - üõ†Ô∏è Solution: Placed files in the right `files/` or `templates/` directory inside the role, and checked the path in the task.
#
# 5Ô∏è‚É£  **Handlers Not Triggering**
#     - ‚ùå Service restarts happened every time, or not at all!
#     - üõ†Ô∏è Solution: Used `notify` in tasks and matched the handler name exactly in `handlers/main.yaml`. Now, services only restart when configs change! üîÑ
#
# 6Ô∏è‚É£  **Copy-Paste Errors & Indentation**
#     - ‚ùå YAML indentation mistakes caused cryptic errors.
#     - üõ†Ô∏è Solution: Used VS Code‚Äôs YAML extension and always checked indentation after pasting code.
#
# 7Ô∏è‚É£  **Not Using Common Roles**
#     - ‚ùå Repeated the same setup steps in every role.
#     - üõ†Ô∏è Solution: Created a `common` role for shared tasks (app setup, maven, python, systemd) and used `include_role` to keep code DRY! üßº
#
# 8Ô∏è‚É£  **Service Connectivity Issues**
#     - ‚ùå Cart couldn‚Äôt talk to Redis, or Shipping couldn‚Äôt reach MySQL.
#     - üõ†Ô∏è Solution: Checked that all hostnames were set in `vars/main.yaml` and that the services were up and running. Used Ansible variables everywhere for easy config.
#
# 9Ô∏è‚É£  **Forgetting to Install Collections**
#     - ‚ùå Used modules like `community.mysql.mysql_db` without installing the collection.
#     - üõ†Ô∏è Solution: Always ran `ansible-galaxy collection install community.mysql` before using those modules.
#
# 1Ô∏è‚É£0Ô∏è‚É£  **Not Restarting Services After Config Changes**
#     - ‚ùå Changes didn‚Äôt take effect until I manually restarted services.
#     - üõ†Ô∏è Solution: Used handlers and `notify` so Ansible does it for me‚Äîno more manual restarts! üéâ
#
# üåü Every mistake was a learning step! Now my playbooks are modular, robust, and easy to maintain. If you‚Äôre a beginner, don‚Äôt worry‚Äîeveryone makes these mistakes. Just keep going, and you‚Äôll master Ansible roles too! üí™ü§ñ
# -----------------------------------------------------------------------------